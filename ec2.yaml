AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 para entornos DEV y PDN

Parameters:
  NetworkUser:
    Type: String
    Description: Nombre del usuario de red
    Default: pfrias
  PrivateSubnetAZ1Id:
    Type: AWS::EC2::Subnet::Id
    Description: ID de la subnet privada en AZ1
  PrivateSubnetAZ2Id:
    Type: AWS::EC2::Subnet::Id
    Description: ID de la subnet privada en AZ2

Resources:
  EC2DEV:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c2b8ca1dad447f8a
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
          - !ImportValue
            Fn::Sub: LDC-AUTH-SG-${NetworkUser}-DEV
          SubnetId:
            Ref: PrivateSubnetAZ2Id
      Tags:
        - Key: Name
          Value: !Sub LDC-AUTH-EC2-${NetworkUser}-DEV
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > /var/log/user-data.log 2>&1
          echo "=== INICIANDO SCRIPT DE USUARIO EN AMAZON LINUX 2 ==="
          yum update -y
          amazon-linux-extras enable docker
          yum install -y docker git curl jq
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ec2-user
          curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          cd /home/ec2-user
          git clone https://github.com/PaulFrias/reto-cloudformation
          PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          export API_URL=http://$PUBLIC_IP:8080/api
          docker-compose up -d 
          echo "=== SCRIPT FINALIZADO ==="

  EC2PDN:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c2b8ca1dad447f8a
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
          - !ImportValue
            Fn::Sub: LDC-AUTH-SG-${NetworkUser}-PDN
          SubnetId:
            Ref: PrivateSubnetAZ1Id
      Tags:
        - Key: Name
          Value: !Sub LDC-AUTH-EC2-${NetworkUser}-PDN
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > /var/log/user-data.log 2>&1
          echo "=== INICIANDO SCRIPT DE USUARIO EN AMAZON LINUX 2 ==="
          yum update -y
          amazon-linux-extras enable docker
          yum install -y docker git curl jq
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ec2-user
          curl -SL https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          cd /home/ec2-user
          git clone https://github.com/PaulFrias/reto-cloudformation
          PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          export API_URL=http://$PUBLIC_IP:8080/api
          docker-compose up -d
          echo "=== SCRIPT FINALIZADO ==="

  TargetGroupFrontend:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub tg-frontend-${NetworkUser}
      Port: 80
      Protocol: HTTP
      VpcId: !Ref ExistingVPCId
      TargetType: instance
      Targets:
        - Id: !ImportValue
              Fn::Sub: LDC-AUTH-EC2-${NetworkUser}-DEV

Outputs:
  EC2DEV:
    Value: !Ref EC2DEV
    Export:
      Name: !Sub LDC-AUTH-EC2-${NetworkUser}-DEV
  EC2PDN:
    Value: !Ref EC2PDN
    Export:
      Name: !Sub LDC-AUTH-EC2-${NetworkUser}-PDN